@use "sass:map";

.select {
  // Округление выпадающего меню
  .choices__list--dropdown, .choices__list[aria-expanded] {
    border-radius: var(--select-dropdown-radius);
  }

  // Внутренняя часть контейнера
  .choices__inner {
    display: flex;
    flex-wrap: wrap;
    align-items: center;

    padding: var(--select-container-padding) !important;
    min-height: var(--select-container-height);
    border-radius: var(--select-container-radius);

    & > .choices__item.choices__item--selectable {
      display: flex;
      flex: 1;
    }
  }

  .choices__list--multiple .choices__item[data-deletable] {
    border-radius: var(--select-badge-radius);
  }

  // Color
  @each $k, $v in $components_colors {
    &#{$k} {
      @if ($k == '') {
        &.is-open .choices__inner {
          border-color: map.get($v, "main-color");
        }
      } @else {
        .choices__inner {
          border-color: map.get($v, "main-color");
        }
      }

      .choices__list--multiple .choices__item {
        background: map.get($v, "main-color");
        border-color: map.get($v, "main-color");

        &:hover {
          background: map.get($v, "main-color-hover");
          border-color: map.get($v, "main-color-hover");
        }
      }

      .choices__inner, .choices__input {
        background: map.get($v, "sub-color");
      }
    }

    &#{$k}-active &.is-open {
      .choices__inner {
        border-color: map.get($v, "main-color");
      }
    }
  }

  // Size
  @each $k, $v in $size_map {
    &.#{$k} .choices__inner {
      padding: var(--select-#{$k}-padding) !important;
      min-height: var(--select-#{$k}-height);
      border-radius: var(--select-#{$k}-radius);
    }
  }
}